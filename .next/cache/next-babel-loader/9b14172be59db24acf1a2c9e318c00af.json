{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dwightnodolf/Development/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\";\nimport Product from \"./Product\";\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport Form from './styles/Form';\nimport DisplayError from './ErrorMessage';\nimport useForm from '../lib/useForm';\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: {id: $id}) {\n      id\n      name \n      description \n      price \n    }\n  }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String \n    $description: String \n    $price: Int \n  ) {\n    updateProduct(\n      id: $id \n      data: { id: $id, name: $name, description: $description,\n      price: $price }\n    ) {\n      id\n      name \n      description \n      price \n    }\n  }\n`;\nexport default function UpdateProduct({\n  id\n}) {\n  //get existing product\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  }); //get mutation to update \n\n  const [updateProduct, {\n    data: updateData,\n    error: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id // have to pass in product updates here\n\n    }\n  }); //create state for form inputs\n\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm(data.Product);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 22\n  }, this); //make a form to hande updates\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: async e => {\n      e.preventDefault(); // HANDLE SUBMIT!!!\n      // submit input fields to the backend\n      //const res = await createProduct(); //data can be captured by setting this to \"const data = await...\"\"\n      //clearForm();\n      //Go to that products page\n      //Router.push({\n      //  pathname: `/product/${res.data.createProduct.id}`\n      // });\n    },\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"Price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/dwightnodolf/Development/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["Product","gql","useQuery","useMutation","Form","DisplayError","useForm","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","error","loading","variables","updateProduct","updateData","updateError","updateLoading","inputs","handleChange","clearForm","resetForm","e","preventDefault","name","price","description"],"mappings":"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","sourcesContent":["import Product from \"./Product\";\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport Form from './styles/Form';\nimport DisplayError from './ErrorMessage'\nimport useForm from '../lib/useForm';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: {id: $id}) {\n      id\n      name \n      description \n      price \n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String \n    $description: String \n    $price: Int \n  ) {\n    updateProduct(\n      id: $id \n      data: { id: $id, name: $name, description: $description,\n      price: $price }\n    ) {\n      id\n      name \n      description \n      price \n    }\n  }\n`;\n\nexport default function UpdateProduct({ id }) {\n  //get existing product\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: { id },\n  });\n\n  //get mutation to update \n  const [ updateProduct, { data: updateData, error: updateError, loading: updateLoading},\n  ] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id,\n      // have to pass in product updates here\n    }\n  })\n  //create state for form inputs\n  const { inputs, handleChange, clearForm, resetForm } = useForm(data.Product);\n  if(loading) return <p>loading...</p>;\n  //make a form to hande updates\n  return (\n\n    <Form onSubmit={async (e) => {\n      e.preventDefault(); // HANDLE SUBMIT!!!\n      // submit input fields to the backend\n      //const res = await createProduct(); //data can be captured by setting this to \"const data = await...\"\"\n      //clearForm();\n      //Go to that products page\n      //Router.push({\n      //  pathname: `/product/${res.data.createProduct.id}`\n      // });\n    }}>\n\n      <DisplayError error={error || updateError}/>\n      <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n\n        <label htmlFor=\"name\">\n          Name\n          <input \n            type=\"text\" \n            id=\"name\" \n            name=\"name\" \n            placeholder=\"Name\" \n            value={inputs.name}\n            onChange={handleChange}\n            />\n        </label>\n\n        <label htmlFor=\"price\">\n          Price\n          <input \n            type=\"number\" \n            id=\"price\" \n            name=\"price\" \n            placeholder=\"Price\" \n            value={inputs.price}\n            onChange={handleChange}\n            />\n        </label>\n\n        <label htmlFor=\"description\">\n          Description\n          <textarea \n            type=\"text\" \n            id=\"description\" \n            name=\"description\" \n            placeholder=\"Description\" \n            value={inputs.description}\n            onChange={handleChange}\n            />\n        </label>\n\n        <button type=\"submit\">Update Product</button>\n      </fieldset>\n    </Form>\n  );\n}"]},"metadata":{},"sourceType":"module"}