{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function PaginationField() {\n  return {\n    keyArgs: false,\n\n    //signals apollo not to intervene\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      const {\n        skip,\n        first\n      } = args; //reading the number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); //checking to see if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        //if We dont have any items, we must go to the network\n        return false;\n      } //if we do have items, return them from the cache and dont go to network\n\n\n      if (items.length) {\n        console.log('There are ${items.length} items in the cache! Will send to Apollo');\n        return items;\n      }\n\n      return false; //fallback to network\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        first\n      } = args; //this runs when the Apollo client comes back from the net with our product\n\n      console.log(`Merging items from the network ${incoming.length}`);\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged);\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/dwightnodolf/Development/Advanced-React/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","PaginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA0B;AACvC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAgC;AAAA;;AAElC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CAFkC,CAGlC;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAPkC,CAQlC;;AACA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AACA,UAAGH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAtD,EAA6D;AAC3D,eAAOG,KAAP;AACD;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAhBiC,CAiBlC;;;AACA,UAAGU,KAAK,CAACI,MAAT,EAAiB;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,mEAAZ;AACA,eAAON,KAAP;AACD;;AACD,aAAO,KAAP,CAtBkC,CAsBpB;AACf,KAzBI;;AA0BLO,IAAAA,KAAK,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,MAAAA;AAAF,KAArB,EAA8B;AACjC,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CADiC,CAEjC;;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAa,kCAAiCE,QAAQ,CAACJ,MAAO,EAA9D;AACA,YAAMK,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AAEA,WAAI,IAAIS,CAAC,GAAGrB,IAAZ,EAAkBqB,CAAC,GAAGrB,IAAI,GAAGmB,QAAQ,CAACJ,MAAtC,EAA8C,EAAEM,CAAhD,EAAkD;AAChDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGrB,IAAL,CAApB;AACD;;AACDgB,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA,aAAOA,MAAP;AACD;;AArCI,GAAP;AAwCD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function PaginationField(){\n  return {\n    keyArgs: false, //signals apollo not to intervene\n    read(existing = [], { args, cache }){\n      \n      const { skip, first } = args;\n      //reading the number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY});\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n      //checking to see if we have existing items\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      if(items.length && items.length !== first && page === pages) {\n        return items;\n      }\n      if (items.length !== first) {\n        //if We dont have any items, we must go to the network\n        return false;\n      }\n      //if we do have items, return them from the cache and dont go to network\n      if(items.length) {\n        console.log('There are ${items.length} items in the cache! Will send to Apollo');\n        return items;\n      }\n      return false; //fallback to network\n    },\n    merge(existing, incoming, { args }){\n      const { skip, first } = args; \n      //this runs when the Apollo client comes back from the net with our product\n      console.log(`Merging items from the network ${incoming.length}`);\n      const merged = existing ? existing.slice(0) : []; \n      \n      for(let i = skip; i < skip + incoming.length; ++i){\n        merged[i] = incoming[i - skip]\n      }\n      console.log(merged);\n      return merged;\n    },\n\n  };\n}"]},"metadata":{},"sourceType":"module"}