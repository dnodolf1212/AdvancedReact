{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dwightnodolf/Development/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dwightnodolf/Development/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/dwightnodolf/Development/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/dwightnodolf/Development/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dwightnodolf/Development/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_PRODUCT_MUTATION(\\n    $id: ID!\\n    $name: String \\n    $description: String \\n    $price: Int \\n  ) {\\n    updateProduct(\\n      id: $id \\n      data: { id: $id, name: $name, description: $description,\\n      price: $price }\\n    ) {\\n      id\\n      name \\n      description \\n      price \\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\\n    Product(where: {id: $id}) {\\n      id\\n      name \\n      description \\n      price \\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Product from \"./Product\";\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport Form from './styles/Form';\nimport DisplayError from './ErrorMessage';\nimport useForm from '../lib/useForm';\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  //get existing product\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; //get mutation to update \n\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id // have to pass in product updates here\n\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading; //create state for form inputs\n\n\n  var _useForm = useForm(data.Product),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      clearForm = _useForm.clearForm,\n      resetForm = _useForm.resetForm;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 22\n  }, this); //make a form to hande updates\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault(); // HANDLE SUBMIT!!!\n                // submit input fields to the backend\n                //const res = await createProduct(); //data can be captured by setting this to \"const data = await...\"\"\n                //clearForm();\n                //Go to that products page\n                //Router.push({\n                //  pathname: `/product/${res.data.createProduct.id}`\n                // });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"Price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UpdateProduct, \"vtP/RPMf33WrGGy4f+wKXShQKCI=\", false, function () {\n  return [useQuery, useMutation, useForm];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["/Users/dwightnodolf/Development/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["Product","gql","useQuery","useMutation","Form","DisplayError","useForm","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","variables","data","error","loading","updateProduct","updateData","updateError","updateLoading","inputs","handleChange","clearForm","resetForm","e","preventDefault","name","price","description"],"mappings":"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","sourcesContent":["import Product from \"./Product\";\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport Form from './styles/Form';\nimport DisplayError from './ErrorMessage'\nimport useForm from '../lib/useForm';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: {id: $id}) {\n      id\n      name \n      description \n      price \n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String \n    $description: String \n    $price: Int \n  ) {\n    updateProduct(\n      id: $id \n      data: { id: $id, name: $name, description: $description,\n      price: $price }\n    ) {\n      id\n      name \n      description \n      price \n    }\n  }\n`;\n\nexport default function UpdateProduct({ id }) {\n  //get existing product\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: { id },\n  });\n\n\n  //get mutation to update \n  const [ updateProduct, { data: updateData, error: updateError, loading: updateLoading},\n  ] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id,\n      // have to pass in product updates here\n    }\n  })\n  //create state for form inputs\n  const { inputs, handleChange, clearForm, resetForm } = useForm(data.Product);\n  if(loading) return <p>loading...</p>;\n  //make a form to hande updates\n  return (\n\n    <Form onSubmit={async (e) => {\n      e.preventDefault(); // HANDLE SUBMIT!!!\n      // submit input fields to the backend\n      //const res = await createProduct(); //data can be captured by setting this to \"const data = await...\"\"\n      //clearForm();\n      //Go to that products page\n      //Router.push({\n      //  pathname: `/product/${res.data.createProduct.id}`\n      // });\n    }}>\n\n      <DisplayError error={error || updateError}/>\n      <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n\n        <label htmlFor=\"name\">\n          Name\n          <input \n            type=\"text\" \n            id=\"name\" \n            name=\"name\" \n            placeholder=\"Name\" \n            value={inputs.name}\n            onChange={handleChange}\n            />\n        </label>\n\n        <label htmlFor=\"price\">\n          Price\n          <input \n            type=\"number\" \n            id=\"price\" \n            name=\"price\" \n            placeholder=\"Price\" \n            value={inputs.price}\n            onChange={handleChange}\n            />\n        </label>\n\n        <label htmlFor=\"description\">\n          Description\n          <textarea \n            type=\"text\" \n            id=\"description\" \n            name=\"description\" \n            placeholder=\"Description\" \n            value={inputs.description}\n            onChange={handleChange}\n            />\n        </label>\n\n        <button type=\"submit\">Update Product</button>\n      </fieldset>\n    </Form>\n  );\n}"]},"metadata":{},"sourceType":"module"}